// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "form.hxx"

// view_t
// 

const view_t::operation_type& view_t::
operation () const
{
  return this->operation_.get ();
}

view_t::operation_type& view_t::
operation ()
{
  return this->operation_.get ();
}

void view_t::
operation (const operation_type& x)
{
  this->operation_.set (x);
}

void view_t::
operation (::std::auto_ptr< operation_type > x)
{
  this->operation_.set (x);
}

const view_t::level_sequence& view_t::
level () const
{
  return this->level_;
}

view_t::level_sequence& view_t::
level ()
{
  return this->level_;
}

void view_t::
level (const level_sequence& s)
{
  this->level_ = s;
}


// level
// 

const level::level_id_type& level::
level_id () const
{
  return this->level_id_.get ();
}

level::level_id_type& level::
level_id ()
{
  return this->level_id_.get ();
}

void level::
level_id (const level_id_type& x)
{
  this->level_id_.set (x);
}

const level::relation_type& level::
relation () const
{
  return this->relation_.get ();
}

level::relation_type& level::
relation ()
{
  return this->relation_.get ();
}

void level::
relation (const relation_type& x)
{
  this->relation_.set (x);
}

void level::
relation (::std::auto_ptr< relation_type > x)
{
  this->relation_.set (x);
}

const level::is_negative_lvl_type& level::
is_negative_lvl () const
{
  return this->is_negative_lvl_.get ();
}

level::is_negative_lvl_type& level::
is_negative_lvl ()
{
  return this->is_negative_lvl_.get ();
}

void level::
is_negative_lvl (const is_negative_lvl_type& x)
{
  this->is_negative_lvl_.set (x);
}

const level::id_type& level::
id () const
{
  return this->id_.get ();
}

level::id_type& level::
id ()
{
  return this->id_.get ();
}

void level::
id (const id_type& x)
{
  this->id_.set (x);
}

void level::
id (::std::auto_ptr< id_type > x)
{
  this->id_.set (x);
}

const level::any_id_type& level::
any_id () const
{
  return this->any_id_.get ();
}

level::any_id_type& level::
any_id ()
{
  return this->any_id_.get ();
}

void level::
any_id (const any_id_type& x)
{
  this->any_id_.set (x);
}

const level::filter_sequence& level::
filter () const
{
  return this->filter_;
}

level::filter_sequence& level::
filter ()
{
  return this->filter_;
}

void level::
filter (const filter_sequence& s)
{
  this->filter_ = s;
}


// filter_t
// 

const filter_t::filter_id_type& filter_t::
filter_id () const
{
  return this->filter_id_.get ();
}

filter_t::filter_id_type& filter_t::
filter_id ()
{
  return this->filter_id_.get ();
}

void filter_t::
filter_id (const filter_id_type& x)
{
  this->filter_id_.set (x);
}

const filter_t::is_negative_filter_type& filter_t::
is_negative_filter () const
{
  return this->is_negative_filter_.get ();
}

filter_t::is_negative_filter_type& filter_t::
is_negative_filter ()
{
  return this->is_negative_filter_.get ();
}

void filter_t::
is_negative_filter (const is_negative_filter_type& x)
{
  this->is_negative_filter_.set (x);
}

const filter_t::comparator_sequence& filter_t::
comparator () const
{
  return this->comparator_;
}

filter_t::comparator_sequence& filter_t::
comparator ()
{
  return this->comparator_;
}

void filter_t::
comparator (const comparator_sequence& s)
{
  this->comparator_ = s;
}


// comparator_t
// 

const comparator_t::comparator_id_type& comparator_t::
comparator_id () const
{
  return this->comparator_id_.get ();
}

comparator_t::comparator_id_type& comparator_t::
comparator_id ()
{
  return this->comparator_id_.get ();
}

void comparator_t::
comparator_id (const comparator_id_type& x)
{
  this->comparator_id_.set (x);
}

const comparator_t::is_negative_comparator_type& comparator_t::
is_negative_comparator () const
{
  return this->is_negative_comparator_.get ();
}

comparator_t::is_negative_comparator_type& comparator_t::
is_negative_comparator ()
{
  return this->is_negative_comparator_.get ();
}

void comparator_t::
is_negative_comparator (const is_negative_comparator_type& x)
{
  this->is_negative_comparator_.set (x);
}

const comparator_t::operator1_type& comparator_t::
operator1 () const
{
  return this->operator1_.get ();
}

comparator_t::operator1_type& comparator_t::
operator1 ()
{
  return this->operator1_.get ();
}

void comparator_t::
operator1 (const operator1_type& x)
{
  this->operator1_.set (x);
}

void comparator_t::
operator1 (::std::auto_ptr< operator1_type > x)
{
  this->operator1_.set (x);
}

const comparator_t::operation_type& comparator_t::
operation () const
{
  return this->operation_.get ();
}

comparator_t::operation_type& comparator_t::
operation ()
{
  return this->operation_.get ();
}

void comparator_t::
operation (const operation_type& x)
{
  this->operation_.set (x);
}

void comparator_t::
operation (::std::auto_ptr< operation_type > x)
{
  this->operation_.set (x);
}

const comparator_t::operator2_type& comparator_t::
operator2 () const
{
  return this->operator2_.get ();
}

comparator_t::operator2_type& comparator_t::
operator2 ()
{
  return this->operator2_.get ();
}

void comparator_t::
operator2 (const operator2_type& x)
{
  this->operator2_.set (x);
}

void comparator_t::
operator2 (::std::auto_ptr< operator2_type > x)
{
  this->operator2_.set (x);
}


// operator_t
// 

const operator_t::operator_type& operator_t::
operator_ () const
{
  return this->operator__.get ();
}

operator_t::operator_type& operator_t::
operator_ ()
{
  return this->operator__.get ();
}

void operator_t::
operator_ (const operator_type& x)
{
  this->operator__.set (x);
}

void operator_t::
operator_ (::std::auto_ptr< operator_type > x)
{
  this->operator__.set (x);
}

const operator_t::is_field_type& operator_t::
is_field () const
{
  return this->is_field_.get ();
}

operator_t::is_field_type& operator_t::
is_field ()
{
  return this->is_field_.get ();
}

void operator_t::
is_field (const is_field_type& x)
{
  this->is_field_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// view_t
//

view_t::
view_t (const operation_type& operation)
: ::xml_schema::type (),
  operation_ (operation, this),
  level_ (this)
{
}

view_t::
view_t (const view_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  operation_ (x.operation_, f, this),
  level_ (x.level_, f, this)
{
}

view_t::
view_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operation_ (this),
  level_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void view_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operation
    //
    if (n.name () == "operation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type > r (
        operation_traits::create (i, f, this));

      if (!operation_.present ())
      {
        this->operation_.set (r);
        continue;
      }
    }

    // level
    //
    if (n.name () == "level" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< level_type > r (
        level_traits::create (i, f, this));

      this->level_.push_back (r);
      continue;
    }

    break;
  }

  if (!operation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operation",
      "");
  }
}

view_t* view_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class view_t (*this, f, c);
}

view_t& view_t::
operator= (const view_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->operation_ = x.operation_;
    this->level_ = x.level_;
  }

  return *this;
}

view_t::
~view_t ()
{
}

// level
//

level::
level (const level_id_type& level_id,
       const relation_type& relation,
       const is_negative_lvl_type& is_negative_lvl,
       const id_type& id,
       const any_id_type& any_id)
: ::xml_schema::type (),
  level_id_ (level_id, this),
  relation_ (relation, this),
  is_negative_lvl_ (is_negative_lvl, this),
  id_ (id, this),
  any_id_ (any_id, this),
  filter_ (this)
{
}

level::
level (const level& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  level_id_ (x.level_id_, f, this),
  relation_ (x.relation_, f, this),
  is_negative_lvl_ (x.is_negative_lvl_, f, this),
  id_ (x.id_, f, this),
  any_id_ (x.any_id_, f, this),
  filter_ (x.filter_, f, this)
{
}

level::
level (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  level_id_ (this),
  relation_ (this),
  is_negative_lvl_ (this),
  id_ (this),
  any_id_ (this),
  filter_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void level::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // level_id
    //
    if (n.name () == "level_id" && n.namespace_ ().empty ())
    {
      if (!level_id_.present ())
      {
        this->level_id_.set (level_id_traits::create (i, f, this));
        continue;
      }
    }

    // relation
    //
    if (n.name () == "relation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< relation_type > r (
        relation_traits::create (i, f, this));

      if (!relation_.present ())
      {
        this->relation_.set (r);
        continue;
      }
    }

    // is_negative_lvl
    //
    if (n.name () == "is_negative_lvl" && n.namespace_ ().empty ())
    {
      if (!is_negative_lvl_.present ())
      {
        this->is_negative_lvl_.set (is_negative_lvl_traits::create (i, f, this));
        continue;
      }
    }

    // id
    //
    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< id_type > r (
        id_traits::create (i, f, this));

      if (!id_.present ())
      {
        this->id_.set (r);
        continue;
      }
    }

    // any_id
    //
    if (n.name () == "any_id" && n.namespace_ ().empty ())
    {
      if (!any_id_.present ())
      {
        this->any_id_.set (any_id_traits::create (i, f, this));
        continue;
      }
    }

    // filter
    //
    if (n.name () == "filter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< filter_type > r (
        filter_traits::create (i, f, this));

      this->filter_.push_back (r);
      continue;
    }

    break;
  }

  if (!level_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "level_id",
      "");
  }

  if (!relation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "relation",
      "");
  }

  if (!is_negative_lvl_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "is_negative_lvl",
      "");
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "id",
      "");
  }

  if (!any_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "any_id",
      "");
  }
}

level* level::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class level (*this, f, c);
}

level& level::
operator= (const level& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->level_id_ = x.level_id_;
    this->relation_ = x.relation_;
    this->is_negative_lvl_ = x.is_negative_lvl_;
    this->id_ = x.id_;
    this->any_id_ = x.any_id_;
    this->filter_ = x.filter_;
  }

  return *this;
}

level::
~level ()
{
}

// filter_t
//

filter_t::
filter_t (const filter_id_type& filter_id,
          const is_negative_filter_type& is_negative_filter)
: ::xml_schema::type (),
  filter_id_ (filter_id, this),
  is_negative_filter_ (is_negative_filter, this),
  comparator_ (this)
{
}

filter_t::
filter_t (const filter_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  filter_id_ (x.filter_id_, f, this),
  is_negative_filter_ (x.is_negative_filter_, f, this),
  comparator_ (x.comparator_, f, this)
{
}

filter_t::
filter_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  filter_id_ (this),
  is_negative_filter_ (this),
  comparator_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void filter_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // filter_id
    //
    if (n.name () == "filter_id" && n.namespace_ ().empty ())
    {
      if (!filter_id_.present ())
      {
        this->filter_id_.set (filter_id_traits::create (i, f, this));
        continue;
      }
    }

    // is_negative_filter
    //
    if (n.name () == "is_negative_filter" && n.namespace_ ().empty ())
    {
      if (!is_negative_filter_.present ())
      {
        this->is_negative_filter_.set (is_negative_filter_traits::create (i, f, this));
        continue;
      }
    }

    // comparator
    //
    if (n.name () == "comparator" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< comparator_type > r (
        comparator_traits::create (i, f, this));

      this->comparator_.push_back (r);
      continue;
    }

    break;
  }

  if (!filter_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "filter_id",
      "");
  }

  if (!is_negative_filter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "is_negative_filter",
      "");
  }
}

filter_t* filter_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class filter_t (*this, f, c);
}

filter_t& filter_t::
operator= (const filter_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->filter_id_ = x.filter_id_;
    this->is_negative_filter_ = x.is_negative_filter_;
    this->comparator_ = x.comparator_;
  }

  return *this;
}

filter_t::
~filter_t ()
{
}

// comparator_t
//

comparator_t::
comparator_t (const comparator_id_type& comparator_id,
              const is_negative_comparator_type& is_negative_comparator,
              const operator1_type& operator1,
              const operation_type& operation,
              const operator2_type& operator2)
: ::xml_schema::type (),
  comparator_id_ (comparator_id, this),
  is_negative_comparator_ (is_negative_comparator, this),
  operator1_ (operator1, this),
  operation_ (operation, this),
  operator2_ (operator2, this)
{
}

comparator_t::
comparator_t (const comparator_id_type& comparator_id,
              const is_negative_comparator_type& is_negative_comparator,
              ::std::auto_ptr< operator1_type > operator1,
              const operation_type& operation,
              ::std::auto_ptr< operator2_type > operator2)
: ::xml_schema::type (),
  comparator_id_ (comparator_id, this),
  is_negative_comparator_ (is_negative_comparator, this),
  operator1_ (operator1, this),
  operation_ (operation, this),
  operator2_ (operator2, this)
{
}

comparator_t::
comparator_t (const comparator_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  comparator_id_ (x.comparator_id_, f, this),
  is_negative_comparator_ (x.is_negative_comparator_, f, this),
  operator1_ (x.operator1_, f, this),
  operation_ (x.operation_, f, this),
  operator2_ (x.operator2_, f, this)
{
}

comparator_t::
comparator_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  comparator_id_ (this),
  is_negative_comparator_ (this),
  operator1_ (this),
  operation_ (this),
  operator2_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void comparator_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // comparator_id
    //
    if (n.name () == "comparator_id" && n.namespace_ ().empty ())
    {
      if (!comparator_id_.present ())
      {
        this->comparator_id_.set (comparator_id_traits::create (i, f, this));
        continue;
      }
    }

    // is_negative_comparator
    //
    if (n.name () == "is_negative_comparator" && n.namespace_ ().empty ())
    {
      if (!is_negative_comparator_.present ())
      {
        this->is_negative_comparator_.set (is_negative_comparator_traits::create (i, f, this));
        continue;
      }
    }

    // operator1
    //
    if (n.name () == "operator1" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operator1_type > r (
        operator1_traits::create (i, f, this));

      if (!operator1_.present ())
      {
        this->operator1_.set (r);
        continue;
      }
    }

    // operation
    //
    if (n.name () == "operation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type > r (
        operation_traits::create (i, f, this));

      if (!operation_.present ())
      {
        this->operation_.set (r);
        continue;
      }
    }

    // operator2
    //
    if (n.name () == "operator2" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operator2_type > r (
        operator2_traits::create (i, f, this));

      if (!operator2_.present ())
      {
        this->operator2_.set (r);
        continue;
      }
    }

    break;
  }

  if (!comparator_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "comparator_id",
      "");
  }

  if (!is_negative_comparator_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "is_negative_comparator",
      "");
  }

  if (!operator1_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operator1",
      "");
  }

  if (!operation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operation",
      "");
  }

  if (!operator2_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operator2",
      "");
  }
}

comparator_t* comparator_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class comparator_t (*this, f, c);
}

comparator_t& comparator_t::
operator= (const comparator_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->comparator_id_ = x.comparator_id_;
    this->is_negative_comparator_ = x.is_negative_comparator_;
    this->operator1_ = x.operator1_;
    this->operation_ = x.operation_;
    this->operator2_ = x.operator2_;
  }

  return *this;
}

comparator_t::
~comparator_t ()
{
}

// operator_t
//

operator_t::
operator_t (const operator_type& operator_,
            const is_field_type& is_field)
: ::xml_schema::type (),
  operator__ (operator_, this),
  is_field_ (is_field, this)
{
}

operator_t::
operator_t (const operator_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  operator__ (x.operator__, f, this),
  is_field_ (x.is_field_, f, this)
{
}

operator_t::
operator_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operator__ (this),
  is_field_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void operator_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operator
    //
    if (n.name () == "operator" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operator_type > r (
        operator_traits::create (i, f, this));

      if (!operator__.present ())
      {
        this->operator__.set (r);
        continue;
      }
    }

    // is_field
    //
    if (n.name () == "is_field" && n.namespace_ ().empty ())
    {
      if (!is_field_.present ())
      {
        this->is_field_.set (is_field_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!operator__.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operator",
      "");
  }

  if (!is_field_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "is_field",
      "");
  }
}

operator_t* operator_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class operator_t (*this, f, c);
}

operator_t& operator_t::
operator= (const operator_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->operator__ = x.operator__;
    this->is_field_ = x.is_field_;
  }

  return *this;
}

operator_t::
~operator_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::view_t >
response (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::view_t > (
    ::response (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::view_t >
response (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::view_t > (
    ::response (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::view_t >
response (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::view_t > (
    ::response (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, f, p);
}

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, h, f, p);
}

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, h, f, p);
}

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, f, p);
}

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, h, f, p);
}

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, h, f, p);
}

::std::auto_ptr< ::view_t >
response (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::view_t > (
    ::response (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::view_t >
response (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::view_t > (
    ::response (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::view_t >
response (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::view_t > (
    ::response (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::view_t >
response (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::view_t > (
      ::response (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::view_t > r (
      ::xsd::cxx::tree::traits< ::view_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "response",
    "");
}

::std::auto_ptr< ::view_t >
response (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::view_t > r (
      ::xsd::cxx::tree::traits< ::view_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "response",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const view_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation",
        e));

    s << i.operation ();
  }

  // level
  //
  for (view_t::level_const_iterator
       b (i.level ().begin ()), n (i.level ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "level",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const level& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // level_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "level_id",
        e));

    s << i.level_id ();
  }

  // relation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "relation",
        e));

    s << i.relation ();
  }

  // is_negative_lvl
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "is_negative_lvl",
        e));

    s << i.is_negative_lvl ();
  }

  // id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "id",
        e));

    s << i.id ();
  }

  // any_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "any_id",
        e));

    s << i.any_id ();
  }

  // filter
  //
  for (level::filter_const_iterator
       b (i.filter ().begin ()), n (i.filter ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "filter",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const filter_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // filter_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "filter_id",
        e));

    s << i.filter_id ();
  }

  // is_negative_filter
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "is_negative_filter",
        e));

    s << i.is_negative_filter ();
  }

  // comparator
  //
  for (filter_t::comparator_const_iterator
       b (i.comparator ().begin ()), n (i.comparator ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "comparator",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const comparator_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // comparator_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "comparator_id",
        e));

    s << i.comparator_id ();
  }

  // is_negative_comparator
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "is_negative_comparator",
        e));

    s << i.is_negative_comparator ();
  }

  // operator1
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operator1",
        e));

    s << i.operator1 ();
  }

  // operation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation",
        e));

    s << i.operation ();
  }

  // operator2
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operator2",
        e));

    s << i.operator2 ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const operator_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operator
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operator",
        e));

    s << i.operator_ ();
  }

  // is_field
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "is_field",
        e));

    s << i.is_field ();
  }
}

void
response (::std::ostream& o,
          const ::view_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
response (::std::ostream& o,
          const ::view_t& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::std::ostream& o,
          const ::view_t& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::view_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::view_t& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::view_t& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::DOMDocument& d,
          const ::view_t& s,
          ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "response",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
response (const ::view_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "response",
      "",
      m, f));

  ::response (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

