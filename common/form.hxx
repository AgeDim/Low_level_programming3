// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___FORM_HXX
#define CXX___FORM_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class view_t;
class level;
class filter_t;
class comparator_t;
class operator_t;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class view_t: public ::xml_schema::type
{
  public:
  // operation
  //
  typedef ::xml_schema::string operation_type;
  typedef ::xsd::cxx::tree::traits< operation_type, char > operation_traits;

  const operation_type&
  operation () const;

  operation_type&
  operation ();

  void
  operation (const operation_type& x);

  void
  operation (::std::auto_ptr< operation_type > p);

  // level
  //
  typedef ::level level_type;
  typedef ::xsd::cxx::tree::sequence< level_type > level_sequence;
  typedef level_sequence::iterator level_iterator;
  typedef level_sequence::const_iterator level_const_iterator;
  typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

  const level_sequence&
  level () const;

  level_sequence&
  level ();

  void
  level (const level_sequence& s);

  // filter
  //
  typedef ::filter_t filter_type;
  typedef ::xsd::cxx::tree::sequence< filter_type > filter_sequence;
  typedef filter_sequence::iterator filter_iterator;
  typedef filter_sequence::const_iterator filter_const_iterator;
  typedef ::xsd::cxx::tree::traits< filter_type, char > filter_traits;

  const filter_sequence&
  filter () const;

  filter_sequence&
  filter ();

  void
  filter (const filter_sequence& s);

  // Constructors.
  //
  view_t (const operation_type&);

  view_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  view_t (const view_t& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual view_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  view_t&
  operator= (const view_t& x);

  virtual 
  ~view_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< operation_type > operation_;
  level_sequence level_;
  filter_sequence filter_;
};

class level: public ::xml_schema::type
{
  public:
  // level1
  //
  typedef ::xml_schema::int_ level1_type;
  typedef ::xsd::cxx::tree::traits< level1_type, char > level1_traits;

  const level1_type&
  level1 () const;

  level1_type&
  level1 ();

  void
  level1 (const level1_type& x);

  // relation
  //
  typedef ::xml_schema::string relation_type;
  typedef ::xsd::cxx::tree::traits< relation_type, char > relation_traits;

  const relation_type&
  relation () const;

  relation_type&
  relation ();

  void
  relation (const relation_type& x);

  void
  relation (::std::auto_ptr< relation_type > p);

  // is_negative_lvl
  //
  typedef ::xml_schema::int_ is_negative_lvl_type;
  typedef ::xsd::cxx::tree::traits< is_negative_lvl_type, char > is_negative_lvl_traits;

  const is_negative_lvl_type&
  is_negative_lvl () const;

  is_negative_lvl_type&
  is_negative_lvl ();

  void
  is_negative_lvl (const is_negative_lvl_type& x);

  // id
  //
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // any_id
  //
  typedef ::xml_schema::int_ any_id_type;
  typedef ::xsd::cxx::tree::traits< any_id_type, char > any_id_traits;

  const any_id_type&
  any_id () const;

  any_id_type&
  any_id ();

  void
  any_id (const any_id_type& x);

  // Constructors.
  //
  level (const level1_type&,
         const relation_type&,
         const is_negative_lvl_type&,
         const id_type&,
         const any_id_type&);

  level (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  level (const level& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual level*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  level&
  operator= (const level& x);

  virtual 
  ~level ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< level1_type > level1_;
  ::xsd::cxx::tree::one< relation_type > relation_;
  ::xsd::cxx::tree::one< is_negative_lvl_type > is_negative_lvl_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< any_id_type > any_id_;
};

class filter_t: public ::xml_schema::type
{
  public:
  // filter_id
  //
  typedef ::xml_schema::int_ filter_id_type;
  typedef ::xsd::cxx::tree::traits< filter_id_type, char > filter_id_traits;

  const filter_id_type&
  filter_id () const;

  filter_id_type&
  filter_id ();

  void
  filter_id (const filter_id_type& x);

  // is_negative_filter
  //
  typedef ::xml_schema::int_ is_negative_filter_type;
  typedef ::xsd::cxx::tree::traits< is_negative_filter_type, char > is_negative_filter_traits;

  const is_negative_filter_type&
  is_negative_filter () const;

  is_negative_filter_type&
  is_negative_filter ();

  void
  is_negative_filter (const is_negative_filter_type& x);

  // comparator
  //
  typedef ::comparator_t comparator_type;
  typedef ::xsd::cxx::tree::sequence< comparator_type > comparator_sequence;
  typedef comparator_sequence::iterator comparator_iterator;
  typedef comparator_sequence::const_iterator comparator_const_iterator;
  typedef ::xsd::cxx::tree::traits< comparator_type, char > comparator_traits;

  const comparator_sequence&
  comparator () const;

  comparator_sequence&
  comparator ();

  void
  comparator (const comparator_sequence& s);

  // Constructors.
  //
  filter_t (const filter_id_type&,
            const is_negative_filter_type&);

  filter_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  filter_t (const filter_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual filter_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  filter_t&
  operator= (const filter_t& x);

  virtual 
  ~filter_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< filter_id_type > filter_id_;
  ::xsd::cxx::tree::one< is_negative_filter_type > is_negative_filter_;
  comparator_sequence comparator_;
};

class comparator_t: public ::xml_schema::type
{
  public:
  // comparator_id
  //
  typedef ::xml_schema::int_ comparator_id_type;
  typedef ::xsd::cxx::tree::traits< comparator_id_type, char > comparator_id_traits;

  const comparator_id_type&
  comparator_id () const;

  comparator_id_type&
  comparator_id ();

  void
  comparator_id (const comparator_id_type& x);

  // is_negative_comparator
  //
  typedef ::xml_schema::int_ is_negative_comparator_type;
  typedef ::xsd::cxx::tree::traits< is_negative_comparator_type, char > is_negative_comparator_traits;

  const is_negative_comparator_type&
  is_negative_comparator () const;

  is_negative_comparator_type&
  is_negative_comparator ();

  void
  is_negative_comparator (const is_negative_comparator_type& x);

  // operator1
  //
  typedef ::operator_t operator1_type;
  typedef ::xsd::cxx::tree::traits< operator1_type, char > operator1_traits;

  const operator1_type&
  operator1 () const;

  operator1_type&
  operator1 ();

  void
  operator1 (const operator1_type& x);

  void
  operator1 (::std::auto_ptr< operator1_type > p);

  // operation
  //
  typedef ::xml_schema::string operation_type;
  typedef ::xsd::cxx::tree::traits< operation_type, char > operation_traits;

  const operation_type&
  operation () const;

  operation_type&
  operation ();

  void
  operation (const operation_type& x);

  void
  operation (::std::auto_ptr< operation_type > p);

  // operator2
  //
  typedef ::operator_t operator2_type;
  typedef ::xsd::cxx::tree::traits< operator2_type, char > operator2_traits;

  const operator2_type&
  operator2 () const;

  operator2_type&
  operator2 ();

  void
  operator2 (const operator2_type& x);

  void
  operator2 (::std::auto_ptr< operator2_type > p);

  // Constructors.
  //
  comparator_t (const comparator_id_type&,
                const is_negative_comparator_type&,
                const operator1_type&,
                const operation_type&,
                const operator2_type&);

  comparator_t (const comparator_id_type&,
                const is_negative_comparator_type&,
                ::std::auto_ptr< operator1_type >,
                const operation_type&,
                ::std::auto_ptr< operator2_type >);

  comparator_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  comparator_t (const comparator_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual comparator_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  comparator_t&
  operator= (const comparator_t& x);

  virtual 
  ~comparator_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< comparator_id_type > comparator_id_;
  ::xsd::cxx::tree::one< is_negative_comparator_type > is_negative_comparator_;
  ::xsd::cxx::tree::one< operator1_type > operator1_;
  ::xsd::cxx::tree::one< operation_type > operation_;
  ::xsd::cxx::tree::one< operator2_type > operator2_;
};

class operator_t: public ::xml_schema::type
{
  public:
  // operator
  //
  typedef ::xml_schema::string operator_type;
  typedef ::xsd::cxx::tree::traits< operator_type, char > operator_traits;

  const operator_type&
  operator_ () const;

  operator_type&
  operator_ ();

  void
  operator_ (const operator_type& x);

  void
  operator_ (::std::auto_ptr< operator_type > p);

  // is_field
  //
  typedef ::xml_schema::unsigned_int is_field_type;
  typedef ::xsd::cxx::tree::traits< is_field_type, char > is_field_traits;

  const is_field_type&
  is_field () const;

  is_field_type&
  is_field ();

  void
  is_field (const is_field_type& x);

  // Constructors.
  //
  operator_t (const operator_type&,
              const is_field_type&);

  operator_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  operator_t (const operator_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual operator_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  operator_t&
  operator= (const operator_t& x);

  virtual 
  ~operator_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< operator_type > operator__;
  ::xsd::cxx::tree::one< is_field_type > is_field_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::view_t >
response (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::view_t >
response (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::view_t >
response (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::view_t >
response (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const view_t&);

void
operator<< (::xercesc::DOMElement&, const level&);

void
operator<< (::xercesc::DOMElement&, const filter_t&);

void
operator<< (::xercesc::DOMElement&, const comparator_t&);

void
operator<< (::xercesc::DOMElement&, const operator_t&);

// Serialize to std::ostream.
//

void
response (::std::ostream& os,
          const ::view_t& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
response (::std::ostream& os,
          const ::view_t& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
response (::std::ostream& os,
          const ::view_t& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
response (::xercesc::XMLFormatTarget& ft,
          const ::view_t& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
response (::xercesc::XMLFormatTarget& ft,
          const ::view_t& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
response (::xercesc::XMLFormatTarget& ft,
          const ::view_t& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
response (::xercesc::DOMDocument& d,
          const ::view_t& x,
          ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
response (const ::view_t& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___FORM_HXX
